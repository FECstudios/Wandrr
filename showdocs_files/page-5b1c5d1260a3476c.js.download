try{!function(){var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="23e88d82-c1e6-4f7c-9cea-6220ec370195",e._sentryDebugIdIdentifier="sentry-dbid-23e88d82-c1e6-4f7c-9cea-6220ec370195")}()}catch(e){}(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[40],{74354:(e,n,t)=>{"use strict";t.d(n,{default:()=>d});var o=t(95155);t(12115);var s=t(3130),r=t(336);let i="https://shov.com/api",a={description:"All API requests must be authenticated using a Bearer Token. Provide your project's API key in the `Authorization` header.",example:"Authorization: Bearer YOUR_API_KEY"},c=["Setup","Authentication","Key/Value","Collections","Search","Streaming","Files","Utilities"],l=[{name:"INSTALL",description:"Install the Shov CLI globally via npm.",group:"Setup",synopsis:"npm install -g shov",args:[],options:[],examples:{cli:"# Install Shov CLI globally\nnpm install -g shov\n\n# Verify installation\nshov --version\n\n# Get help\nshov --help",curl:"# CLI installation is required for project creation\n# The Shov CLI provides the easiest way to get started\n# Install via npm: npm install -g shov","js-sdk":"// CLI installation is required for project creation\n// After installing the CLI, you can use the JavaScript SDK:\n// npm install shov-js\n\nimport { Shov } from 'shov-js';\n// Note: You'll need a project and API key first (created via CLI)"},returns:"# Successful installation output:\n+ shov@2.3.0\nadded 1 package in 2.1s",errors:[{code:"EACCES",message:"Permission denied — Try using sudo or configure npm properly"},{code:"ENOTFOUND",message:"Network error — Check your internet connection"}],notes:"The CLI requires Node.js 16+ and npm. After installation, the `shov` command will be available globally."},{name:"NEW",description:"Create a new Shov project with automatic API key generation.",group:"Setup",synopsis:"shov new <project-name> [--json]",httpMethod:"POST",endpoint:"/new",args:[{name:"project-name",type:"string",required:!0,description:"The name of your new project (alphanumeric, hyphens allowed)."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Create a new project\nshov new my-first-project\n\n# Create with JSON output for scripting\nshov new my-app --json\n\n# The command will output your API key - save it securely!",curl:"# Create a new project via API\ncurl -X POST ".concat(i,'/new \\\n  -H "Content-Type: application/json" \\\n  -d \'{"projectName": "my-first-project"}\'\n\n# Response includes your API key and project details'),"js-sdk":"// Project creation is best handled via CLI for security\n// But you can also call the API directly:\n\nconst response = await fetch('".concat(i,"/new', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ projectName: 'my-first-project' })\n});\n\nconst data = await response.json();\nconsole.log('API Key:', data.apiKey);")},returns:'{\n  "success": true,\n  "projectName": "my-first-project",\n  "apiKey": "shov_live_abc123def456...",\n  "message": "Project created successfully"\n}',errors:[{code:400,message:"Bad Request — Project name is invalid or already exists"},{code:429,message:"Too Many Requests — Rate limit exceeded"}],notes:"Project names must be unique, alphanumeric with hyphens allowed. Your API key is generated immediately and should be stored securely. No email registration required.\n\n⚠️ IMPORTANT: Save your API key immediately - it cannot be recovered if lost."},{name:"CLAIM",description:"Claim an anonymous project by associating it with your email address.",group:"Setup",synopsis:"shov claim <project-name> <email> [--json]",httpMethod:"POST",endpoint:"/claim/initiate and /claim/verify",args:[{name:"project-name",type:"string",required:!0,description:"The name of the anonymous project to claim."},{name:"email",type:"string",required:!0,description:"Your email address to associate with the project."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Claim an anonymous project\nshov claim my-anonymous-project user@example.com\n\n# The CLI will:\n# 1. Send a verification code to your email\n# 2. Prompt you to enter the code\n# 3. Complete the claim process\n\n# Claim with JSON output\nshov claim my-project user@example.com --json",curl:'# Step 1: Initiate the claim process\ncurl -X POST https://shov.com/api/claim/initiate \\\n  -H "Content-Type: application/json" \\\n  -d \'{"projectName": "my-anonymous-project", "email": "user@example.com"}\'\n\n# Step 2: Verify with the OTP code sent to your email\ncurl -X POST https://shov.com/api/claim/verify \\\n  -H "Content-Type: application/json" \\\n  -d \'{"projectName": "my-anonymous-project", "email": "user@example.com", "pin": "1234"}\'',"js-sdk":"// Project claiming is best handled via CLI for security\n// But you can also call the API endpoints directly:\n\n// Step 1: Initiate claim\nconst initiateResponse = await fetch('https://shov.com/api/claim/initiate', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ \n    projectName: 'my-anonymous-project', \n    email: 'user@example.com' \n  })\n});\n\n// Step 2: Verify with OTP\nconst verifyResponse = await fetch('https://shov.com/api/claim/verify', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({ \n    projectName: 'my-anonymous-project', \n    email: 'user@example.com', \n    pin: '1234' \n  })\n});"},returns:'// Initiate response:\n{\n  "success": true,\n  "message": "A verification code has been sent to user@example.com."\n}\n\n// Verify response:\n{\n  "success": true,\n  "message": "Project claimed successfully! You can now manage this project from your account."\n}',errors:[{code:400,message:"Bad Request — Project name, email, or PIN is invalid"},{code:403,message:"Forbidden — Project has already been claimed or you already have a free organization"},{code:404,message:"Not Found — Project not found"},{code:429,message:"Too Many Requests — Rate limit exceeded"}],notes:"The claim process allows users who created projects anonymously to later associate them with their email address for dashboard access and management. This is a two-step process:\n\n1. **Initiate**: Send a verification code to the provided email\n2. **Verify**: Confirm ownership with the OTP code\n\n⚠️ IMPORTANT: Only anonymous projects can be claimed. Each user can only have one free organization, so claiming is limited if you already have a free organization.\n\nThe claim process includes rate limiting and abuse prevention to ensure security."},{name:"SET",description:"Store a key-value pair.",group:"Key/Value",synopsis:"shov set <key> <value> [--ttl <seconds>] [--json]",httpMethod:"POST",endpoint:"/set/{project}",args:[{name:"key",type:"string",required:!0,description:"The key for the value."},{name:"value",type:"json",required:!0,description:"The JSON value to store."}],options:[{name:"--ttl",type:"integer",required:!1,description:"Optional time-to-live in seconds."},{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Set a simple string value\nshov set greeting "Hello from Shov"\n\n# Set a JSON object with TTL\nshov set user-config \'{"theme": "dark", "lang": "en"}\' --ttl 3600\n\n# Get JSON output for scripting\nshov set api-key "sk_live_abc123" --json',curl:"# Set a simple string value\ncurl -X POST ".concat(i,'/set/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "greeting", "value": "Hello from Shov"}\'\n\n# Set a JSON object with TTL\ncurl -X POST ').concat(i,'/set/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "user-config", "value": {"theme": "dark", "lang": "en"}, "ttl": 3600}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Set a simple string value\nawait shov.set('greeting', 'Hello from Shov');\n\n// Set a JSON object with TTL\nawait shov.set('user-config', { theme: 'dark', lang: 'en' }, { ttl: 3600 });\n\n// Set with custom options\nawait shov.set('api-key', 'sk_live_abc123');"},returns:'{\n  "success": true\n}',errors:[{code:400,message:'Bad Request — "name" is required or JSON is malformed'},{code:401,message:"Unauthorized — API key is missing or invalid"}]},{name:"GET",description:"Retrieve a key-value pair.",group:"Key/Value",synopsis:"shov get <key> [--json]",httpMethod:"POST",endpoint:"/get/{project}",args:[{name:"key",type:"string",required:!0,description:"The key to retrieve."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Get a value\nshov get greeting\n\n# Get with JSON output for scripting\nshov get user-config --json",curl:"# Get a value\ncurl -X POST ".concat(i,'/get/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "greeting"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Get a value\nconst greeting = await shov.get('greeting');\nconsole.log(greeting); // \"Hello from Shov\"\n\n// Get a JSON object\nconst config = await shov.get('user-config');\nconsole.log(config); // { theme: 'dark', lang: 'en' }"},returns:'// If found:\n{\n  "success": true,\n  "value": { "message": "hello world" }\n}\n\n// If not found:\n{\n  "success": true,\n  "value": null\n}',errors:[{code:401,message:"Unauthorized — API key is missing or invalid"}],notes:"If a key is not found, the command succeeds and returns a `null` value."},{name:"FORGET",description:"Permanently delete a key-value pair.",group:"Key/Value",synopsis:"shov forget <key> [--json]",httpMethod:"POST",endpoint:"/forget/{project}",args:[{name:"key",type:"string",required:!0,description:"The key to delete."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Delete a key\nshov forget old-config\n\n# Delete with JSON output\nshov forget temp-data --json",curl:"# Delete a key\ncurl -X POST ".concat(i,'/forget/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "old-config"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Delete a key\nawait shov.forget('old-config');"},returns:'{\n  "success": true,\n  "message": "Item forgotten."\n}',errors:[{code:401,message:"Unauthorized — API key is missing or invalid"},{code:404,message:"Not Found — The requested key does not exist"}]},{name:"ADD",description:"Add a JSON object to a collection.",group:"Collections",synopsis:"shov add <collection> <value> [--ttl <seconds>] [--id <custom_id>] [--json]",httpMethod:"POST",endpoint:"/add/{project}",args:[{name:"collection",type:"string",required:!0,description:"The name of the collection."},{name:"value",type:"json",required:!0,description:"The JSON object to add."}],options:[{name:"--ttl",type:"integer",required:!1,description:"Optional time-to-live in seconds."},{name:"--id",type:"string",required:!1,description:"Provide a custom ID for the item."},{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Add a user to collection\nshov add users \'{"name": "Alice", "email": "alice@example.com", "role": "admin"}\'\n\n# Add with custom ID and TTL\nshov add sessions \'{"user_id": "123", "token": "abc"}\' --id "session_123" --ttl 3600\n\n# Add with JSON output\nshov add products \'{"name": "iPhone Case", "price": 29.99}\' --json',curl:"# Add a user to collection\ncurl -X POST ".concat(i,'/add/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "value": {"name": "Alice", "email": "alice@example.com", "role": "admin"}}\'\n\n# Add with custom ID and TTL\ncurl -X POST ').concat(i,'/add/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "sessions", "value": {"user_id": "123", "token": "abc"}, "id": "session_123", "ttl": 3600}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Add a user to collection\nconst user = await shov.add('users', {\n  name: 'Alice',\n  email: 'alice@example.com',\n  role: 'admin'\n});\n\n// Add with custom ID and TTL\nconst session = await shov.add('sessions', {\n  user_id: '123',\n  token: 'abc'\n}, { id: 'session_123', ttl: 3600 });\n\n// Add a product\nconst product = await shov.add('products', {\n  name: 'iPhone Case',\n  price: 29.99\n});"},returns:'{\n  "success": true,\n  "id": "item_abc123"\n}',errors:[{code:400,message:'Bad Request — "name" is required or JSON is malformed'},{code:401,message:"Unauthorized — API key is missing or invalid"}],notes:"Item IDs are unique per collection. If no ID is provided, a unique one will be generated."},{name:"ADD-MANY",description:"Add multiple JSON objects to a collection at once.",group:"Collections",synopsis:"shov add-many <collection> <items> [--json]",httpMethod:"POST",endpoint:"/add-many/{project}",args:[{name:"collection",type:"string",required:!0,description:"The name of the collection."},{name:"items",type:"json array",required:!0,description:"An array of JSON objects to add."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Add multiple products at once\nshov add-many products \'[\n  {"name": "Fender Stratocaster", "type": "Electric Guitar", "price": 1299},\n  {"name": "Ibanez RG550", "type": "Electric Guitar", "price": 899},\n  {"name": "Roland TD-27KV", "type": "Electronic Drums", "price": 2499}\n]\'\n\n# Add with JSON output\nshov add-many users \'[\n  {"name": "Bob", "email": "bob@example.com"},\n  {"name": "Carol", "email": "carol@example.com"}\n]\' --json',curl:"# Add multiple products at once\ncurl -X POST ".concat(i,'/add-many/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "name": "products",\n    "items": [\n      {"name": "Fender Stratocaster", "type": "Electric Guitar", "price": 1299},\n      {"name": "Ibanez RG550", "type": "Electric Guitar", "price": 899},\n      {"name": "Roland TD-27KV", "type": "Electronic Drums", "price": 2499}\n    ]\n  }\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Add multiple products at once\nconst result = await shov.addMany('products', [\n  { name: 'Fender Stratocaster', type: 'Electric Guitar', price: 1299 },\n  { name: 'Ibanez RG550', type: 'Electric Guitar', price: 899 },\n  { name: 'Roland TD-27KV', type: 'Electronic Drums', price: 2499 }\n]);\n\n// Add multiple users\nconst users = await shov.addMany('users', [\n  { name: 'Bob', email: 'bob@example.com' },\n  { name: 'Carol', email: 'carol@example.com' }\n]);"},returns:'{\n  "success": true,\n  "ids": ["item_abc123", "item_def456", "item_ghi789"]\n}',errors:[{code:400,message:'Bad Request — "name" or "items" are missing/invalid'},{code:401,message:"Unauthorized — API key is missing or invalid"}]},{name:"WHERE",description:"Filter items in a collection based on JSON properties.",group:"Collections",synopsis:"shov where <collection> [--filter <json>] [--limit <number>] [--offset <number>] [--sort <json>] [--json]",httpMethod:"POST",endpoint:"/where/{project}",args:[{name:"collection",type:"string",required:!0,description:"The name of the collection to query."}],options:[{name:"--filter, -f",type:"json",required:!1,description:"JSON object for filtering."},{name:"--limit",type:"integer",required:!1,description:"Maximum number of items to return."},{name:"--offset",type:"integer",required:!1,description:"Skip this many results (for pagination)."},{name:"--sort",type:"json",required:!1,description:"JSON object for sorting results."},{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Get all users\nshov where users\n\n# Filter users by role (exact match)\nshov where users --filter \'{"role": "admin"}\'\n\n# Advanced range filtering\nshov where users --filter \'{"age": {"$gte": 18, "$lt": 65}}\'\n\n# Advanced set filtering\nshov where users --filter \'{"role": {"$in": ["admin", "moderator"]}}\'\n\n# Pattern matching\nshov where users --filter \'{"name": {"$like": "John%"}}\'\n\n# Existence checks\nshov where users --filter \'{"profile": {"$exists": true}}\'\n\n# Complex nested filtering\nshov where users --filter \'{"profile.settings.theme": "dark", "age": {"$between": [25, 45]}}\'\n\n# Logical OR filtering\nshov where users --filter \'{"$or": [{"role": "admin"}, {"status": "premium"}]}\'\n\n# Logical AND filtering (explicit)\nshov where users --filter \'{"$and": [{"age": {"$gte": 18}}, {"verified": true}]}\'\n\n# Complex logical combinations\nshov where products --filter \'{"category": "electronics", "$or": [{"price": {"$lt": 100}}, {"brand": "Apple"}]}\'\n\n# Get users with pagination and sorting\nshov where users --limit 10 --offset 20 --sort \'{"name": "asc"}\' --json',curl:"# Get all users\ncurl -X POST ".concat(i,'/where/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users"}\'\n\n# Filter users by role (exact match)\ncurl -X POST ').concat(i,'/where/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "filter": {"role": "admin"}}\'\n\n# Advanced range filtering\ncurl -X POST ').concat(i,'/where/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "filter": {"age": {"$gte": 18, "$lt": 65}}}\'\n\n# Advanced set filtering  \ncurl -X POST ').concat(i,'/where/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "filter": {"role": {"$in": ["admin", "moderator"]}}}\'\n\n# Pattern matching\ncurl -X POST ').concat(i,'/where/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "filter": {"name": {"$like": "John%"}}}\'\n\n# Complex nested filtering\ncurl -X POST ').concat(i,'/where/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "filter": {"profile.settings.theme": "dark", "age": {"$between": [25, 45]}}}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Get all users\nconst allUsers = await shov.where('users');\n\n// Filter users by role (exact match)\nconst admins = await shov.where('users', { \n  filter: { role: 'admin' } \n});\n\n// Advanced range filtering\nconst adults = await shov.where('users', {\n  filter: { age: { $gte: 18, $lt: 65 } }\n});\n\n// Advanced set filtering\nconst moderators = await shov.where('users', {\n  filter: { role: { $in: ['admin', 'moderator'] } }\n});\n\n// Pattern matching\nconst johns = await shov.where('users', {\n  filter: { name: { $like: 'John%' } }\n});\n\n// Existence checks\nconst usersWithProfiles = await shov.where('users', {\n  filter: { profile: { $exists: true } }\n});\n\n// Complex nested filtering\nconst darkThemeUsers = await shov.where('users', {\n  filter: { \n    'profile.settings.theme': 'dark',\n    age: { $between: [25, 45] }\n  }\n});\n\n// Pagination and sorting\nconst paginatedUsers = await shov.where('users', {\n  limit: 10,\n  offset: 20,\n  sort: { name: 'asc' }\n});"},returns:'{\n  "success": true,\n  "items": [\n    {\n      "id": "item_abc123",\n      "name": "users",\n      "type": "collection_item",\n      "value": { "name": "Alice", "role": "admin" },\n      "createdAt": "2024-01-15T10:30:00Z"\n    }\n  ]\n}',errors:[{code:400,message:'Bad Request — "name" is required or filter is malformed'},{code:401,message:"Unauthorized — API key is missing or invalid"}]},{name:"UPDATE",description:"Update an item in a collection by collection name and ID.",group:"Collections",synopsis:"shov update <collection> <id> <value> [--json]",httpMethod:"POST",endpoint:"/update/{project}/{id}",args:[{name:"collection",type:"string",required:!0,description:"The name of the collection."},{name:"id",type:"string",required:!0,description:"The ID of the item to update."},{name:"value",type:"json",required:!0,description:"A JSON object containing the fields to update."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Update a user\'s role\nshov update users user_123 \'{"role": "moderator", "updated_at": "2024-01-15T10:30:00Z"}\'\n\n# Update with JSON output\nshov update products item_abc123 \'{"price": 24.99, "sale": true}\' --json',curl:"# Update a user's role\ncurl -X POST ".concat(i,'/update/my-project/user_123 \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"collection": "users", "value": {"role": "moderator", "updated_at": "2024-01-15T10:30:00Z"}}\'\n\n# Update a product\'s price\ncurl -X POST ').concat(i,'/update/my-project/item_abc123 \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"collection": "products", "value": {"price": 24.99, "sale": true}}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Update a user's role\nconst result = await shov.update('users', 'user_123', {\n  role: 'moderator',\n  updated_at: new Date().toISOString()\n});\n\n// Update a product's price\nconst product = await shov.update('products', 'item_abc123', {\n  price: 24.99,\n  sale: true\n});"},returns:'{\n  "success": true,\n  "message": "Item updated.",\n  "id": "item_abc123"\n}',errors:[{code:400,message:'Bad Request — "collection", "id", or "value" is missing'},{code:401,message:"Unauthorized — API key is missing or invalid"},{code:404,message:"Not Found — Item with the specified ID not found"}]},{name:"REMOVE",description:"Remove an item from a collection by collection name and ID.",group:"Collections",synopsis:"shov remove <collection> <id> [--json]",httpMethod:"POST",endpoint:"/remove/{project}/{id}",args:[{name:"collection",type:"string",required:!0,description:"The name of the collection."},{name:"id",type:"string",required:!0,description:"The ID of the item to remove."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Remove a user\nshov remove users user_123\n\n# Remove with JSON output\nshov remove products item_abc123 --json",curl:"# Remove a user\ncurl -X POST ".concat(i,'/remove/my-project/user_123 \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"collection": "users"}\'\n\n# Remove a product\ncurl -X POST ').concat(i,'/remove/my-project/item_abc123 \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"collection": "products"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Remove a user\nawait shov.remove('users', 'user_123');\n\n// Remove a product\nawait shov.remove('products', 'item_abc123');"},returns:'{\n  "success": true,\n  "message": "Item removed.",\n  "id": "item_abc123"\n}',errors:[{code:400,message:'Bad Request — "collection" or "id" is missing'},{code:401,message:"Unauthorized — API key is missing or invalid"},{code:404,message:"Not Found — Item with the specified ID not found"}]},{name:"CLEAR",description:"Clear all items from a collection.",group:"Collections",synopsis:"shov clear <collection> [--json]",httpMethod:"POST",endpoint:"/clear/{project}",args:[{name:"collection",type:"string",required:!0,description:"The name of the collection to clear."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Clear all items from a collection\nshov clear temp-data\n\n# Clear with JSON output\nshov clear old-sessions --json",curl:"# Clear all items from a collection\ncurl -X POST ".concat(i,'/clear/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "temp-data"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Clear all items from a collection\nconst result = await shov.clear('temp-data');\nconsole.log(`Cleared ${result.count} items`);"},returns:'{\n  "success": true,\n  "count": 42\n}',errors:[{code:400,message:'Bad Request — "name" of collection is required'},{code:401,message:"Unauthorized — API key is missing or invalid"}]},{name:"BATCH",description:"Execute multiple operations atomically in a single transaction.",group:"Collections",synopsis:"shov batch <operations> [--json]",httpMethod:"POST",endpoint:"/batch/{project}",args:[{name:"operations",type:"json array",required:!0,description:"Array of operations to execute atomically."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Execute multiple operations atomically\nshov batch \'[\n  {"type": "set", "name": "user:123", "value": {"name": "John", "email": "john@example.com"}},\n  {"type": "add", "collection": "orders", "value": {"userId": "123", "total": 99.99}},\n  {"type": "update", "collection": "inventory", "id": "item-456", "value": {"stock": 10}}\n]\'\n\n# E-commerce checkout example (atomic transaction)\nshov batch \'[\n  {"type": "add", "collection": "orders", "value": {"userId": "123", "items": [{"id": "prod-1", "qty": 2}], "total": 199.98}},\n  {"type": "update", "collection": "inventory", "id": "prod-1", "value": {"stock": 8}},\n  {"type": "set", "name": "user:123:last_order", "value": "order-abc123"}\n]\'\n\n# Read-your-writes consistency\nshov batch \'[\n  {"type": "set", "name": "counter", "value": 1},\n  {"type": "get", "name": "counter"},\n  {"type": "set", "name": "counter", "value": 2}\n]\' --json',curl:"# Execute multiple operations atomically\ncurl -X POST ".concat(i,'/batch/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "operations": [\n      {"type": "set", "name": "user:123", "value": {"name": "John", "email": "john@example.com"}},\n      {"type": "add", "collection": "orders", "value": {"userId": "123", "total": 99.99}},\n      {"type": "update", "collection": "inventory", "id": "item-456", "value": {"stock": 10}}\n    ]\n  }\'\n\n# E-commerce checkout example\ncurl -X POST ').concat(i,'/batch/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "operations": [\n      {"type": "add", "collection": "orders", "value": {"userId": "123", "items": [{"id": "prod-1", "qty": 2}], "total": 199.98}},\n      {"type": "update", "collection": "inventory", "id": "prod-1", "value": {"stock": 8}},\n      {"type": "set", "name": "user:123:last_order", "value": "order-abc123"}\n    ]\n  }\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Execute multiple operations atomically\nconst result = await shov.batch([\n  { type: 'set', name: 'user:123', value: { name: 'John', email: 'john@example.com' } },\n  { type: 'add', collection: 'orders', value: { userId: '123', total: 99.99 } },\n  { type: 'update', collection: 'inventory', id: 'item-456', value: { stock: 10 } }\n]);\n\n// E-commerce checkout example (atomic transaction)\nconst checkoutResult = await shov.batch([\n  { type: 'add', collection: 'orders', value: { userId: '123', items: [{ id: 'prod-1', qty: 2 }], total: 199.98 } },\n  { type: 'update', collection: 'inventory', id: 'prod-1', value: { stock: 8 } },\n  { type: 'set', name: 'user:123:last_order', value: 'order-abc123' }\n]);\n\n// Read-your-writes consistency\nconst consistencyResult = await shov.batch([\n  { type: 'set', name: 'counter', value: 1 },\n  { type: 'get', name: 'counter' },\n  { type: 'set', name: 'counter', value: 2 }\n]);"},returns:'{\n  "success": true,\n  "results": [\n    { "success": true },\n    { "success": true, "id": "item_abc123" },\n    { "success": true, "message": "Item updated.", "id": "item-456" }\n  ],\n  "transactionId": "txn_def456ghi789",\n  "operationsExecuted": 3\n}',errors:[{code:400,message:'Bad Request — "operations" array is required, empty, or contains invalid operations'},{code:401,message:"Unauthorized — API key is missing or invalid"},{code:409,message:"Conflict — One or more operations failed, entire transaction rolled back"}],notes:"Batch operations execute atomically - either all operations succeed or all fail. This is perfect for implementing complex workflows like e-commerce checkouts, user registration flows, or any scenario requiring data consistency across multiple operations.\n\nSupported operation types:\n• set - Set key-value pairs\n• get - Read values (for read-your-writes consistency)\n• add - Add items to collections\n• update - Update collection items by ID\n• remove - Remove collection items by ID\n• forget - Delete keys\n• clear - Clear entire collections\n\n⚠️ IMPORTANT: All operations in a batch are executed atomically. If any operation fails, the entire batch is rolled back and no changes are made."},{name:"COUNT",description:"Count the number of items in a collection with optional filtering.",group:"Collections",synopsis:"shov count <collection> [--filter <json>] [--json]",httpMethod:"POST",endpoint:"/count/{project}",args:[{name:"collection",type:"string",required:!0,description:"The name of the collection to count."}],options:[{name:"--filter, -f",type:"json",required:!1,description:"JSON object for filtering items before counting."},{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Count all users\nshov count users\n\n# Count users with specific role\nshov count users --filter \'{"role": "admin"}\'\n\n# Count with advanced filtering\nshov count users --filter \'{"age": {"$gte": 18}, "status": "active"}\'\n\n# Count with JSON output\nshov count products --filter \'{"price": {"$lt": 100}}\' --json',curl:"# Count all users\ncurl -X POST ".concat(i,'/count/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users"}\'\n\n# Count users with specific role\ncurl -X POST ').concat(i,'/count/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "filter": {"role": "admin"}}\'\n\n# Count with advanced filtering\ncurl -X POST ').concat(i,'/count/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"name": "users", "filter": {"age": {"$gte": 18}, "status": "active"}}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Count all users\nconst totalUsers = await shov.count('users');\nconsole.log('Total users:', totalUsers.count);\n\n// Count users with specific role\nconst adminCount = await shov.count('users', { \n  filter: { role: 'admin' } \n});\nconsole.log('Admin users:', adminCount.count);\n\n// Count with advanced filtering\nconst activeAdults = await shov.count('users', {\n  filter: { \n    age: { $gte: 18 }, \n    status: 'active' \n  }\n});\nconsole.log('Active adult users:', activeAdults.count);\n\n// Count products under $100\nconst affordableProducts = await shov.count('products', {\n  filter: { price: { $lt: 100 } }\n});"},returns:'{\n  "success": true,\n  "count": 42,\n  "collection": "users"\n}',errors:[{code:400,message:'Bad Request — "name" is required or filter is malformed'},{code:401,message:"Unauthorized — API key is missing or invalid"}],notes:"COUNT returns the total number of items matching the filter criteria without transferring the actual data, making it efficient for large collections. Supports all the same filtering options as the WHERE operation."},{name:"SEARCH",description:"Perform vector search across keys and collections with optional filtering. Results are automatically filtered by relevance (minimum score 0.5 by default).",group:"Search",synopsis:"shov search <query> [--collection <name>] [--top-k <number>] [--min-score <number>] [--filters <json>] [--limit <number>] [--offset <number>] [--json]",httpMethod:"POST",endpoint:"/search/{project}",args:[{name:"query",type:"string",required:!0,description:"The search query string."}],options:[{name:"--collection, -c",type:"string",required:!1,description:"Limit search to a specific collection."},{name:"--top-k",type:"integer",required:!1,description:"The number of results to return. Default is 10."},{name:"--topK",type:"integer",required:!1,description:"Alias for --top-k (backward compatibility)."},{name:"--min-score",type:"float",required:!1,description:"The minimum similarity score for results. Default is 0.5 for relevance. Minimum allowed is 0.3."},{name:"--minScore",type:"float",required:!1,description:"Alias for --min-score (backward compatibility)."},{name:"--filters",type:"json",required:!1,description:'JSON object to filter results by specific fields (e.g. {"user_id": "123", "category": "electronics"}).'},{name:"--limit",type:"integer",required:!1,description:"Alias for --top-k (pagination support)."},{name:"--offset",type:"integer",required:!1,description:"Skip this many results (for pagination)."},{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Basic vector search\nshov search "stringed musical instruments"\n\n# Search in specific collection with exact filters\nshov search "smartphone cases" -c products --filters \'{"user_id": "user123", "category": "electronics"}\'\n\n# Advanced search with range filters\nshov search "affordable laptops" -c products --filters \'{"price": {"$gte": 500, "$lte": 1500}}\'\n\n# Search with set filters\nshov search "programming tutorials" -c posts --filters \'{"tags": {"$in": ["javascript", "python", "react"]}}\'\n\n# Search with pattern matching\nshov search "john" -c users --filters \'{"name": {"$like": "John%"}, "status": "active"}\'\n\n# Search with existence checks\nshov search "user profiles" -c users --filters \'{"profile.bio": {"$exists": true}, "age": {"$gte": 18}}\'\n\n# Complex search with nested filters\nshov search "machine learning tutorial" --top-k 5 --min-score 0.8 --filters \'{"author.profile.verified": true, "publishedAt": {"$gte": "2024-01-01"}, "tags": {"$in": ["ai", "ml"]}}\' --json\n\n# Search with pagination\nshov search "guitar" --limit 10 --offset 20',curl:"# Basic vector search\ncurl -X POST ".concat(i,'/search/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"query": "stringed musical instruments"}\'\n\n# Search with exact filters\ncurl -X POST ').concat(i,'/search/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": "smartphone cases",\n    "collection": "products",\n    "filters": {\n      "user_id": "user123",\n      "category": "electronics"\n    }\n  }\'\n\n# Search with range filters\ncurl -X POST ').concat(i,'/search/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": "affordable laptops",\n    "collection": "products",\n    "filters": {\n      "price": {"$gte": 500, "$lte": 1500}\n    }\n  }\'\n\n# Search with set filters\ncurl -X POST ').concat(i,'/search/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": "programming tutorials",\n    "collection": "posts",\n    "filters": {\n      "tags": {"$in": ["javascript", "python", "react"]}\n    }\n  }\'\n\n# Complex search with advanced filters\ncurl -X POST ').concat(i,'/search/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "query": "machine learning tutorial",\n    "topK": 5,\n    "minScore": 0.8,\n    "filters": {\n      "author.profile.verified": true,\n      "publishedAt": {"$gte": "2024-01-01"},\n      "tags": {"$in": ["ai", "ml"]}\n    }\n  }\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Basic vector search\nconst results = await shov.search('stringed musical instruments');\n\n// Search with exact filters\nconst products = await shov.search('smartphone cases', {\n  collection: 'products',\n  filters: {\n    user_id: 'user123',\n    category: 'electronics'\n  }\n});\n\n// Search with range filters\nconst affordableLaptops = await shov.search('affordable laptops', {\n  collection: 'products',\n  filters: {\n    price: { $gte: 500, $lte: 1500 }\n  }\n});\n\n// Search with set filters\nconst tutorials = await shov.search('programming tutorials', {\n  collection: 'posts',\n  filters: {\n    tags: { $in: ['javascript', 'python', 'react'] }\n  }\n});\n\n// Search with pattern matching\nconst johns = await shov.search('john', {\n  collection: 'users',\n  filters: {\n    name: { $like: 'John%' },\n    status: 'active'\n  }\n});\n\n// Search with existence checks\nconst userProfiles = await shov.search('user profiles', {\n  collection: 'users',\n  filters: {\n    'profile.bio': { $exists: true },\n    age: { $gte: 18 }\n  }\n});\n\n// Complex search with advanced filters\nconst advancedResults = await shov.search('machine learning tutorial', {\n  topK: 5,\n  minScore: 0.8,\n  filters: {\n    'author.profile.verified': true,\n    publishedAt: { $gte: '2024-01-01' },\n    tags: { $in: ['ai', 'ml'] }\n  }\n});\n\n// Search with pagination\nconst paginatedResults = await shov.search('guitar', {\n  limit: 10,\n  offset: 20\n});"},returns:'{\n  "success": true,\n  "query": "smartphone",\n  "project": "my-project", \n  "collection": null,\n  "total": 1,\n  "items": [\n    {\n      "id": "item_abc123",\n      "name": "products",\n      "type": "collection_item",\n      "value": { "name": "iPhone Case", "user_id": "user123", "category": "electronics" },\n      "createdAt": "2024-01-15T10:30:00Z",\n      "_score": 0.94\n    }\n  ]\n}',errors:[{code:400,message:'Bad Request — "query" is required or filters JSON is malformed'},{code:401,message:"Unauthorized — API key is missing or invalid"}],notes:"Vector search finds semantically similar items first, then applies JSON field filters for precise results. Filters use exact matching on JSON properties. Use --json flag for structured output suitable for scripting and automation.\n\n⚠️ IMPORTANT: Vector indexing has eventual consistency - there is a small delay between adding data and it becoming searchable. Plan your application logic accordingly."},{name:"UPLOAD",description:"Upload a file directly.",group:"Files",synopsis:"shov upload <filepath> [--json]",httpMethod:"POST",endpoint:"/upload/{project}",args:[{name:"filepath",type:"string",required:!0,description:"The local path to the file to upload."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Upload a file\nshov upload ./document.pdf\n\n# Upload with JSON output\nshov upload ./image.png --json",curl:"# Upload a file\ncurl -X POST ".concat(i,'/upload/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "x-shov-filename: document.pdf" \\\n  -H "Content-Type: application/pdf" \\\n  --data-binary @document.pdf\n\n# Upload an image\ncurl -X POST ').concat(i,'/upload/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "x-shov-filename: image.png" \\\n  -H "Content-Type: image/png" \\\n  --data-binary @image.png'),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Upload a file from file input\nconst fileInput = document.querySelector('input[type=\"file\"]');\nconst file = fileInput.files[0];\nconst result = await shov.upload(file);\n\n// Upload with custom filename\nconst customFile = new File([blob], 'custom-name.pdf', { type: 'application/pdf' });\nconst uploadResult = await shov.upload(customFile);"},returns:'{\n  "success": true,\n  "fileId": "file_abc123",\n  "url": "https://your-project.shov.com/files/file_abc123"\n}',errors:[{code:401,message:"Unauthorized — API key is missing or invalid"},{code:404,message:"Not Found — File not found at the specified path"}]},{name:"UPLOAD-URL",description:"Get a pre-signed URL for client-side file uploads.",group:"Files",synopsis:"shov upload-url <filename> [--mime-type <type>] [--json]",httpMethod:"POST",endpoint:"/upload-url/{project}",args:[{name:"filename",type:"string",required:!0,description:"The name of the file to be uploaded."}],options:[{name:"--mime-type",type:"string",required:!1,description:"MIME type of the file (auto-detected if not provided)."},{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Get upload URL for a PDF\nshov upload-url document.pdf\n\n# Get upload URL with specific MIME type\nshov upload-url data.csv --mime-type "text/csv"\n\n# Get upload URL with JSON output\nshov upload-url image.jpg --json',curl:"# Get upload URL for a PDF\ncurl -X POST ".concat(i,'/upload-url/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"fileName": "document.pdf", "mimeType": "application/pdf"}\'\n\n# Get upload URL for CSV\ncurl -X POST ').concat(i,'/upload-url/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"fileName": "data.csv", "mimeType": "text/csv"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Get upload URL for a PDF\nconst { uploadUrl, fileId } = await shov.getUploadUrl('document.pdf', 'application/pdf');\n\n// Use the upload URL for client-side upload\nconst file = document.querySelector('input[type=\"file\"]').files[0];\nconst response = await fetch(uploadUrl, {\n  method: 'PUT',\n  body: file,\n  headers: {\n    'Content-Type': file.type\n  }\n});\n\n// Get upload URL for CSV\nconst csvUpload = await shov.getUploadUrl('data.csv', 'text/csv');"},returns:'{\n  "success": true,\n  "uploadUrl": "https://storage.shov.com/upload/...",\n  "fileId": "file_abc123"\n}',errors:[{code:400,message:'Bad Request — "fileName" is required'},{code:401,message:"Unauthorized — API key is missing or invalid"}]},{name:"FORGET-FILE",description:"Permanently delete a file.",group:"Files",synopsis:"shov forget-file <filename> [--json]",httpMethod:"POST",endpoint:"/forget-file/{project}",args:[{name:"filename",type:"string",required:!0,description:"The name of the file to delete."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Delete a file\nshov forget-file old-document.pdf\n\n# Delete with JSON output\nshov forget-file temp-image.png --json",curl:"# Delete a file\ncurl -X POST ".concat(i,'/forget-file/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"filename": "old-document.pdf"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Delete a file\nawait shov.forgetFile('old-document.pdf');"},returns:'{\n  "success": true,\n  "count": 1\n}',errors:[{code:400,message:'Bad Request — "filename" is required'},{code:401,message:"Unauthorized — API key is missing or invalid"},{code:404,message:"Not Found — File not found"}]},{name:"SEND-OTP",description:"Send a one-time password to an identifier.",group:"Authentication",synopsis:"shov send-otp <identifier> [--json]",httpMethod:"POST",endpoint:"/send-otp/{project}",args:[{name:"identifier",type:"string",required:!0,description:"The identifier (e.g., email) to send the OTP to."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Send OTP to email\nshov send-otp user@example.com\n\n# Send OTP with JSON output\nshov send-otp admin@company.com --json",curl:"# Send OTP to email\ncurl -X POST ".concat(i,'/send-otp/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"identifier": "user@example.com"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Send OTP to email\nconst result = await shov.sendOtp('user@example.com');\nconsole.log(result.message); // \"Verification code sent to user@example.com.\"\n\n// Send OTP to admin\nawait shov.sendOtp('admin@company.com');"},returns:'{\n  "success": true,\n  "message": "Verification code sent to user@example.com."\n}',errors:[{code:400,message:'Bad Request — "identifier" is required or invalid'},{code:401,message:"Unauthorized — API key is missing or invalid"}]},{name:"VERIFY-OTP",description:"Verify a one-time password for an identifier.",group:"Authentication",synopsis:"shov verify-otp <identifier> <pin> [--json]",httpMethod:"POST",endpoint:"/verify-otp/{project}",args:[{name:"identifier",type:"string",required:!0,description:"The identifier (e.g., email) associated with the OTP."},{name:"pin",type:"string",required:!0,description:"The one-time password to verify."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# Verify OTP\nshov verify-otp user@example.com 1234\n\n# Verify OTP with JSON output\nshov verify-otp admin@company.com 5678 --json",curl:"# Verify OTP\ncurl -X POST ".concat(i,'/verify-otp/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{"identifier": "user@example.com", "pin": "1234"}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Verify OTP\nconst result = await shov.verifyOtp('user@example.com', '1234');\nif (result.success) {\n  console.log('PIN verified successfully');\n}\n\n// Verify OTP for admin\nconst adminVerification = await shov.verifyOtp('admin@company.com', '5678');"},returns:'{\n  "success": true,\n  "message": "PIN verified successfully."\n}',errors:[{code:400,message:'Bad Request — "identifier" or "pin" are missing, or PIN is invalid/expired'},{code:401,message:"Unauthorized — API key is missing or invalid"}]},{name:"BROADCAST",description:"Broadcast a message to subscribers of a specific subscription.",group:"Streaming",synopsis:"shov broadcast <subscription> <message> [--json]",httpMethod:"POST",endpoint:"/broadcast/{project}",args:[{name:"subscription",type:"json",required:!0,description:"Subscription object with collection, key, or channel properties."},{name:"message",type:"json",required:!0,description:"The message to broadcast to subscribers."}],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Broadcast to collection subscribers\nshov broadcast \'{"collection": "users", "filters": {"status": "active"}}\' \'{"type": "notification", "text": "System maintenance in 5 minutes"}\'\n\n# Broadcast to key subscribers\nshov broadcast \'{"key": "config"}\' \'{"theme": "dark", "updated_at": "2024-01-15T10:30:00Z"}\'\n\n# Broadcast to channel subscribers\nshov broadcast \'{"channel": "chat-room-1"}\' \'{"user": "Alice", "message": "Hello everyone!"}\'\n\n# Broadcast with JSON output\nshov broadcast \'{"collection": "orders"}\' \'{"status": "shipped", "tracking": "ABC123"}\' --json',curl:"# Broadcast to collection subscribers\ncurl -X POST ".concat(i,'/broadcast/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "subscription": {"collection": "users", "filters": {"status": "active"}},\n    "message": {"type": "notification", "text": "System maintenance in 5 minutes"}\n  }\'\n\n# Broadcast to key subscribers\ncurl -X POST ').concat(i,'/broadcast/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "subscription": {"key": "config"},\n    "message": {"theme": "dark", "updated_at": "2024-01-15T10:30:00Z"}\n  }\'\n\n# Broadcast to channel subscribers\ncurl -X POST ').concat(i,'/broadcast/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "subscription": {"channel": "chat-room-1"},\n    "message": {"user": "Alice", "message": "Hello everyone!"}\n  }\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Broadcast to collection subscribers\nawait shov.broadcast(\n  { collection: 'users', filters: { status: 'active' } },\n  { type: 'notification', text: 'System maintenance in 5 minutes' }\n);\n\n// Broadcast to key subscribers\nawait shov.broadcast(\n  { key: 'config' },\n  { theme: 'dark', updated_at: new Date().toISOString() }\n);\n\n// Broadcast to channel subscribers\nawait shov.broadcast(\n  { channel: 'chat-room-1' },\n  { user: 'Alice', message: 'Hello everyone!' }\n);"},returns:'{\n  "success": true,\n  "messageId": "msg_abc123def456",\n  "delivered": 3\n}',errors:[{code:400,message:'Bad Request — "subscription" or "message" are missing or malformed'},{code:401,message:"Unauthorized — API key is missing or invalid"}],notes:"Broadcast sends messages to all active subscribers matching the subscription criteria. The message is delivered immediately to connected clients. If no subscribers are active, the message is still recorded for analytics but not delivered.\n\n⚠️ IMPORTANT: Messages are not persisted - they are only delivered to currently connected subscribers. For persistent messaging, store the data using SET or ADD operations which will trigger auto-broadcasts."},{name:"SUBSCRIBE",description:"Subscribe to real-time updates from collections, keys, or channels using Server-Sent Events.",group:"Streaming",synopsis:"shov subscribe <subscriptions> [--expires <seconds>] [--verbose]",httpMethod:"GET",endpoint:"/subscribe/{project}",args:[{name:"subscriptions",type:"json array",required:!0,description:"Array of subscription objects with collection, key, or channel properties."}],options:[{name:"--expires",type:"integer",required:!1,description:"Token expiration time in seconds (default: 3600)."},{name:"--verbose",type:"flag",required:!1,description:"Show heartbeat messages for debugging."}],examples:{cli:'# Subscribe to multiple subscriptions with advanced filters\nshov subscribe \'[\n  {"collection": "users", "filters": {"status": "active", "age": {"$gte": 18}}},\n  {"collection": "orders", "filters": {"total": {"$gt": 100}, "status": {"$in": ["pending", "processing"]}}},\n  {"key": "config"},\n  {"channel": "chat-room-1"}\n]\'\n\n# Subscribe with range filters\nshov subscribe \'[{"collection": "products", "filters": {"price": {"$between": [10, 100]}, "category": "electronics"}}]\'\n\n# Subscribe with pattern matching\nshov subscribe \'[{"collection": "users", "filters": {"name": {"$like": "Admin%"}, "role": {"$ne": "guest"}}}]\'\n\n# Subscribe with existence checks\nshov subscribe \'[{"collection": "profiles", "filters": {"avatar": {"$exists": true}, "verified": true}}]\'\n\n# Subscribe with custom token expiration\nshov subscribe \'[{"collection": "orders"}]\' --expires 7200\n\n# Subscribe with verbose output\nshov subscribe \'[{"channel": "notifications"}]\' --verbose',curl:'# Subscribe using EventSource in JavaScript with advanced filters\nconst subscriptions = [\n  {\n    collection: "users", \n    filters: {\n      status: "active", \n      age: {$gte: 18},\n      "profile.verified": true\n    }\n  },\n  {\n    collection: "orders", \n    filters: {\n      total: {$gt: 100}, \n      status: {$in: ["pending", "processing"]},\n      "customer.tier": {$ne: "guest"}\n    }\n  },\n  {key: "config"},\n  {channel: "chat-room-1"}\n];\n\n// First create a streaming token with advanced filters\nconst tokenResponse = await fetch(\''.concat(i,"/token/my-project', {\n  method: 'POST',\n  headers: { 'Content-Type': 'application/json' },\n  body: JSON.stringify({\n    type: 'streaming',\n    subscriptions: subscriptions,\n    expires_in: 3600,\n    api_key: 'YOUR_API_KEY'\n  })\n});\n\nconst { token } = await tokenResponse.json();\n\n// Then connect to the stream (token contains all filter logic)\nconst eventSource = new EventSource(\n  `").concat(i,"/subscribe/my-project?token=${token}`\n);\n\neventSource.onmessage = (event) => {\n  const data = JSON.parse(event.data);\n  console.log('Received filtered update:', data);\n};"),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Subscribe with advanced filters\nconst { eventSource, close } = await shov.subscribe([\n  { \n    collection: 'users', \n    filters: { \n      status: 'active',\n      age: { $gte: 18 },\n      'profile.verified': true\n    } \n  },\n  { \n    collection: 'orders', \n    filters: { \n      total: { $gt: 100 },\n      status: { $in: ['pending', 'processing'] },\n      'customer.tier': { $ne: 'guest' }\n    }\n  },\n  { key: 'config' },\n  { channel: 'chat-room-1' }\n], {\n  onMessage: (data) => {\n    console.log('Received filtered update:', data);\n  },\n  onError: (error) => {\n    console.error('Stream error:', error);\n  },\n  onOpen: () => {\n    console.log('Connected to stream with advanced filters');\n  }\n});\n\n// Subscribe with range filters\nconst rangeStream = await shov.subscribe([\n  { \n    collection: 'products', \n    filters: { \n      price: { $between: [10, 100] },\n      category: 'electronics',\n      'inventory.stock': { $gt: 0 }\n    }\n  }\n], {\n  onMessage: (data) => {\n    console.log('Product update:', data.data);\n  }\n});\n\n// Subscribe with pattern matching\nconst patternStream = await shov.subscribe([\n  { \n    collection: 'users', \n    filters: { \n      name: { $like: 'Admin%' },\n      role: { $ne: 'guest' },\n      'settings.notifications': { $exists: true }\n    }\n  }\n], { \n  expires_in: 7200,\n  onMessage: (data) => {\n    console.log('Admin user update:', data.data);\n  }\n});\n\n// Close connections when done\n// close();\n// rangeStream.close();\n// patternStream.close();"},returns:'// Server-Sent Events stream with messages like:\n{\n  "type": "connected",\n  "connectionId": "conn_abc123",\n  "subscriptions": 3,\n  "timestamp": "2024-01-15T10:30:00Z"\n}\n\n{\n  "type": "message",\n  "subscription": {"collection": "users"},\n  "data": {\n    "operation": "add",\n    "collection": "users",\n    "key": null,\n    "oldValue": null,\n    "newValue": {"name": "Alice", "status": "active"},\n    "timestamp": "2024-01-15T10:30:15Z"\n  },\n  "timestamp": "2024-01-15T10:30:15Z"\n}\n\n{\n  "type": "ping",\n  "timestamp": "2024-01-15T10:30:30Z"\n}',errors:[{code:400,message:'Bad Request — "subscriptions" array is missing or malformed'},{code:401,message:"Unauthorized — Invalid or expired token"},{code:403,message:"Forbidden — Token does not have access to requested subscriptions"}],notes:"Subscribe creates a persistent Server-Sent Events (SSE) connection for real-time updates. The connection automatically handles reconnection and includes heartbeat messages every 10 seconds. \n\nSubscription Types:\n• Collection: Receives updates when items are added, updated, or removed from the collection\n• Key: Receives updates when the key-value pair is modified\n• Channel: Receives custom broadcast messages sent to the channel\n\n⚠️ IMPORTANT: Subscriptions require a streaming token for authentication. The CLI handles token creation automatically, but browser clients must create tokens first using the TOKEN endpoint."},{name:"TOKEN",description:"Create a temporary token for various client-side operations.",group:"Utilities",synopsis:"shov token --type streaming <subscriptions> [--expires <seconds>] [--json]",httpMethod:"POST",endpoint:"/token/{project}",args:[{name:"type",type:"string",required:!0,description:'Token type. Currently supported: "streaming".'},{name:"subscriptions",type:"json array",required:!0,description:"For streaming tokens: Array of subscription objects with collection, key, or channel properties."}],options:[{name:"--expires",type:"integer",required:!1,description:"Token expiration time in seconds (default: 3600)."},{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:'# Create streaming token with advanced filters\nshov token --type streaming \'[\n  {"collection": "users", "filters": {"status": "active", "age": {"$gte": 18}, "role": {"$in": ["admin", "moderator"]}}},\n  {"collection": "orders", "filters": {"total": {"$gt": 50}, "status": {"$ne": "cancelled"}}},\n  {"key": "config"},\n  {"channel": "chat-room-1"}\n]\'\n\n# Create token with range filters\nshov token --type streaming \'[{"collection": "products", "filters": {"price": {"$between": [10, 100]}, "category": "electronics"}}]\'\n\n# Create token with pattern matching\nshov token --type streaming \'[{"collection": "users", "filters": {"name": {"$like": "Admin%"}, "profile.verified": {"$exists": true}}}]\'\n\n# Create token with custom expiration\nshov token --type streaming \'[{"channel": "notifications"}]\' --expires 7200\n\n# Create token with JSON output\nshov token --type streaming \'[{"collection": "orders"}]\' --json',curl:"# Create streaming token for multiple subscriptions\ncurl -X POST ".concat(i,'/token/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "type": "streaming",\n    "subscriptions": [\n      {"collection": "users", "filters": {"status": "active"}},\n      {"key": "config"},\n      {"channel": "chat-room-1"}\n    ],\n    "expires_in": 3600\n  }\'\n\n# Create token with custom expiration\ncurl -X POST ').concat(i,'/token/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "type": "streaming",\n    "subscriptions": [{"channel": "notifications"}],\n    "expires_in": 7200\n  }\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// Create streaming token for multiple subscriptions\nconst token = await shov.createToken('streaming', [\n  { collection: 'users', filters: { status: 'active' } },\n  { key: 'config' },\n  { channel: 'chat-room-1' }\n]);\n\n// Create token with custom expiration\nconst longToken = await shov.createToken('streaming', [\n  { channel: 'notifications' }\n], { expires_in: 7200 });\n\nconsole.log('Token:', token.token);\nconsole.log('Expires at:', token.expires_at);"},returns:'{\n  "success": true,\n  "token": "a1b2c3d4e5f6...",\n  "expires_in": 3600,\n  "expires_at": "2024-01-15T11:30:00Z",\n  "subscriptions": 3\n}',errors:[{code:400,message:'Bad Request — "subscriptions" array is required or malformed'},{code:401,message:"Unauthorized — API key is missing or invalid"}],notes:"Stream tokens are temporary, scoped credentials that allow clients to subscribe to real-time updates without exposing your API key. Each subscription must specify exactly one of: collection, key, or channel. Filters are optional for collection and key subscriptions.\n\n⚠️ IMPORTANT: Store tokens securely and use HTTPS for all streaming connections. Tokens are single-use per connection and automatically refresh while active."},{name:"CONTENTS",description:"List all items (keys, collections, files) in a project.",group:"Utilities",synopsis:"shov contents [--json]",httpMethod:"POST",endpoint:"/contents/{project}",args:[],options:[{name:"--json",type:"flag",required:!1,description:"Output structured JSON for scripting."}],examples:{cli:"# List all project contents\nshov contents\n\n# List with JSON output\nshov contents --json",curl:"# List all project contents\ncurl -X POST ".concat(i,'/contents/my-project \\\n  -H "Authorization: Bearer YOUR_API_KEY" \\\n  -H "Content-Type: application/json" \\\n  -d \'{}\''),"js-sdk":"import { Shov } from 'shov-js';\nconst shov = new Shov({ \n  projectName: 'my-project',\n  apiKey: 'YOUR_API_KEY' \n});\n\n// List all project contents\nconst contents = await shov.contents();\nconsole.log('Keys:', contents.keys);\nconsole.log('Collections:', contents.collections);\nconsole.log('Files:', contents.files);"},returns:'{\n  "success": true,\n  "contents": {\n    "keys": ["config", "apiKey"],\n    "collections": ["users", "posts"],\n    "files": ["document.pdf"]\n  }\n}',errors:[{code:401,message:"Unauthorized — API key is missing or invalid"}]}];function p(e){let{synopsis:n,args:t,options:s,returns:i,errors:a,notes:c}=e,l=e=>{let{title:n,icon:t,children:s}=e;return(0,o.jsxs)("div",{className:"py-4",children:[(0,o.jsxs)("h5",{className:"text-sm font-semibold text-gray-300 mb-3 flex items-center",children:[t&&(0,o.jsx)("span",{className:"mr-2",children:t}),n]}),s]})},p=e=>{let{data:n}=e;return(0,o.jsxs)("table",{className:"w-full text-sm",children:[(0,o.jsx)("thead",{children:(0,o.jsxs)("tr",{className:"text-left text-gray-400",children:[(0,o.jsx)("th",{className:"py-2 pr-4 font-medium w-1/4",children:"Argument"}),(0,o.jsx)("th",{className:"py-2 pr-4 font-medium w-1/4",children:"Type"}),(0,o.jsx)("th",{className:"py-2 pr-4 font-medium w-1/12",children:"Required"}),(0,o.jsx)("th",{className:"py-2 font-medium",children:"Description"})]})}),(0,o.jsx)("tbody",{children:n.map(e=>(0,o.jsxs)("tr",{className:"border-t border-dashed border-gray-700/50 ".concat(e.required?"text-gray-300":"text-gray-500 italic"),children:[(0,o.jsx)("td",{className:"py-2 pr-4 font-mono",children:e.name}),(0,o.jsx)("td",{className:"py-2 pr-4 font-mono",children:e.type}),(0,o.jsx)("td",{className:"py-2 pr-4 text-center",children:e.required?"✓":""}),(0,o.jsx)("td",{className:"py-2",children:e.description})]},e.name))})]})},d=(0,r.Zt)(i);return(0,o.jsxs)("div",{className:"mt-6 bg-gray-900/50 border border-gray-700 rounded-lg shadow-md",children:[(0,o.jsxs)("div",{className:"p-4 border-b border-gray-700/50",children:[(0,o.jsx)("h5",{className:"text-sm font-semibold text-gray-300 mb-2",children:"Synopsis"}),(0,o.jsx)("code",{className:"text-sm text-pink-400 bg-[#181818] p-2 rounded-md block whitespace-nowrap overflow-x-auto border border-pink-700/50",children:n})]}),(0,o.jsxs)("div",{className:"p-4 divide-y divide-gray-700/50",children:[t&&t.length>0&&(0,o.jsx)(l,{title:"Arguments",icon:"\uD83D\uDCD1",children:(0,o.jsx)(p,{data:t})}),s&&s.length>0&&(0,o.jsx)(l,{title:"Options",icon:"\uD83D\uDCD1",children:(0,o.jsx)(p,{data:s})}),i&&(0,o.jsx)(l,{title:"Returns",icon:"\uD83D\uDCE5",children:(0,o.jsx)("pre",{className:"p-4 text-sm overflow-x-auto syntax-highlight bg-[#181818] rounded-md border border-gray-700/50",children:(0,o.jsx)("code",{dangerouslySetInnerHTML:{__html:d}})})}),a&&a.length>0&&(0,o.jsx)(l,{title:"Errors",icon:"⚠️",children:(0,o.jsx)("div",{className:"text-sm text-gray-400 space-y-1",children:a.map(e=>(0,o.jsxs)("div",{children:[(0,o.jsx)("code",{className:"font-mono text-red-400 mr-2",children:e.code}),(0,o.jsxs)("span",{children:["— ",e.message]})]},e.code))})}),c&&(0,o.jsx)(l,{title:"Notes",icon:"\uD83D\uDD39",children:(0,o.jsx)("p",{className:"text-sm text-gray-400 whitespace-pre-line",children:c})})]})]})}function d(){return(0,o.jsx)("div",{id:"api-reference",className:"border-t-2 border-dashed border-gray-700/50",children:(0,o.jsxs)("div",{className:"max-w-5xl mx-auto px-4 sm:px-6 lg:px-8",children:[(0,o.jsxs)("div",{className:"mt-8 flex justify-center gap-3",children:[(0,o.jsx)("a",{href:"/openapi.json",target:"_blank",className:"inline-flex items-center px-4 py-2 bg-gray-800 hover:bg-gray-700 text-white text-sm font-medium rounded-md border border-gray-600 transition-colors",children:"\uD83D\uDCC4 OpenAPI JSON"}),(0,o.jsx)("a",{href:"/openapi.yaml",target:"_blank",className:"inline-flex items-center px-4 py-2 bg-gray-800 hover:bg-gray-700 text-white text-sm font-medium rounded-md border border-gray-600 transition-colors",children:"\uD83D\uDCC4 OpenAPI YAML"})]}),(0,o.jsx)("div",{className:"mt-12",children:c.map(e=>(0,o.jsxs)("div",{className:"mb-10",children:[(0,o.jsx)("h3",{className:"text-xl font-semibold text-white mb-4",children:e}),"Authentication"===e&&(0,o.jsxs)("div",{className:"mb-6 p-4 bg-black/30 border border-dashed border-gray-700/50 rounded-lg text-sm text-gray-400 space-y-3",children:[(0,o.jsx)("p",{children:a.description}),(0,o.jsx)("code",{className:"block text-xs bg-[#181818] p-2 rounded-md border border-gray-700/50",children:a.example})]}),(0,o.jsx)("div",{className:"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4",children:l.filter(n=>n.group===e).map(e=>(0,o.jsx)("a",{href:"#".concat(e.name.toLowerCase()),className:"group flex items-center justify-center text-center p-4 bg-gray-800/50 border border-gray-700/50 rounded-lg hover:bg-gray-700/50 transition",children:(0,o.jsx)("span",{className:"font-mono text-sm font-medium text-gray-300 group-hover:text-white",children:e.name})},e.name))})]},e))}),(0,o.jsx)("div",{className:"mt-20 space-y-16",children:l.map(e=>(0,o.jsxs)("div",{id:e.name.toLowerCase(),className:"scroll-mt-20",children:[(0,o.jsx)("h4",{className:"text-2xl font-bold text-white font-mono",children:e.name}),(0,o.jsx)("p",{className:"mt-2 text-gray-400",children:e.description}),(0,o.jsx)("div",{className:"mt-6",children:(0,o.jsx)(s.default,{command:e.name})}),(0,o.jsx)(p,{...e})]},e.name))})]})})}l.map(e=>{var n,t,o,s,r,i,a,c,l;return{name:e.name,description:e.description,group:e.group,synopsis:e.synopsis,httpMethod:e.httpMethod,endpoint:e.endpoint,args:e.args,options:e.options,curlExample:(null==(t=e.examples)||null==(n=t.curl)?void 0:n.split("\n").slice(0,6).join("\n"))+((null==(s=e.examples)||null==(o=s.curl)?void 0:o.split("\n").length)>6?"\n  # ...":""),returns:(null==(r=e.returns)?void 0:r.split("\n").slice(0,8).join("\n"))+((null==(i=e.returns)?void 0:i.split("\n").length)>8?"\n  # ...":""),keyErrors:(null==(a=e.errors)?void 0:a.slice(0,2).map(e=>"".concat(e.code,": ").concat(e.message)))||[],notes:(null==(c=e.notes)?void 0:c.split(".")[0])+((null==(l=e.notes)?void 0:l.split(".").length)>1?"...":"")}}),l.filter(e=>e.httpMethod&&e.endpoint).map(e=>({name:e.name,endpoint:e.endpoint.replace(/^\//,"").replace(/\{project\}\/?/,"").replace(/\{projectName\}\/?/,"").trim(),method:e.httpMethod,description:e.description,group:e.group,args:e.args||[],payloadExample:(()=>{switch(e.name){case"SET":return{name:"key",value:"any value"};case"GET":case"FORGET":return{name:"key"};case"ADD":return{name:"collection",value:{field:"value"}};case"ADD-MANY":return{name:"collection",items:[{field:"value1"},{field:"value2"}]};case"WHERE":return{name:"collection",filter:{field:"value"},limit:10};case"UPDATE":return{collection:"collection_name",value:{field:"new_value"}};case"REMOVE":return{collection:"collection_name"};case"CLEAR":return{name:"collection"};case"COUNT":return{name:"collection",filter:{field:"value"}};case"SEARCH":return{query:"search text",topK:10};case"CONTENTS":return{};case"SEND-OTP":return{identifier:"user@example.com"};case"VERIFY-OTP":return{identifier:"user@example.com",pin:"1234"};case"BROADCAST":return{subscription:{collection:"users"},message:{type:"notification"}};case"TOKEN":return{type:"streaming",subscriptions:[{collection:"users"}]};case"BATCH":return{operations:[{type:"set",name:"key",value:"value"}]};case"UPLOAD":return{fileName:"document.pdf"};case"UPLOAD-URL":return{fileName:"document.pdf",mimeType:"application/pdf"};case"FORGET-FILE":return{filename:"document.pdf"};default:let n={};return e.args&&e.args.forEach(t=>{"project-name"!==t.name&&"id"!==t.name&&(n[("UPDATE"===e.name||"REMOVE"===e.name)&&"collection"===t.name?"collection":"collection"===t.name?"name":t.name]="json"===t.type?{}:"json array"===t.type?[]:"example")}),Object.keys(n).length>0?n:null}})()}))},74787:(e,n,t)=>{Promise.resolve().then(t.bind(t,74354))}},e=>{e.O(0,[749,850,441,186,358],()=>e(e.s=74787)),_N_E=e.O()}]);